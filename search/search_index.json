{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Justice","text":"<p>A Justice, as defined in this reference document, is one of many justices sitting in the Supreme Court:</p> <p>             Bases: <code>BaseModel</code></p>"},{"location":"#corpus_judge.justice_model.Justice--justice","title":"Justice","text":"Field Type Description id int Unique identifier of the Justice based on appointment roster full_name str First + last + suffix first_name str - last_name str - suffix str e.g. Jr., Sr., III, etc. nick_name str - gender str - alias str Other names start_term str Time justice appointed end_term str Time justice chief_date str Date appointed as Chief Justice (optional) birth_date str Date of birth retire_date str Based on the Birth Date, if it exists, it is the maximum term of service allowed by law. inactive_date str Which date is earliest inactive date of the Justice, the retire date is set automatically but it is not guaranteed to to be the actual inactive date. So the inactive date is either that specified in the <code>end_term</code> or the <code>retire_date</code>, whichever is earlier. <p>The list of justices from the sc.yaml file are parsed through this model prior to being inserted into the database.</p> Source code in <code>corpus_judge/justice_model.py</code> Python<pre><code>class Justice(BaseModel):\n    \"\"\"\n    # Justice\n\n    Field | Type | Description\n    --:|:--|:--\n    id |int | Unique identifier of the Justice based on appointment roster\n    full_name |str | First + last + suffix\n    first_name |str | -\n    last_name |str | -\n    suffix |str | e.g. Jr., Sr., III, etc.\n    nick_name |str | -\n    gender |str | -\n    alias |str | Other names\n    start_term |str | Time justice appointed\n    end_term |str | Time justice\n    chief_date |str | Date appointed as Chief Justice (optional)\n    birth_date |str | Date of birth\n    retire_date |str | Based on the Birth Date, if it exists, it is the maximum term of service allowed by law.\n    inactive_date |str | Which date is earliest inactive date of the Justice, the retire date is set automatically but it is not guaranteed to to be the actual inactive date. So the inactive date is either that specified in the `end_term` or the `retire_date`, whichever is earlier.\n\n    The list of justices from the sc.yaml file are parsed through this model prior to being inserted\n    into the database.\n    \"\"\"  # noqa: E501\n\n    model_config = ConfigDict(use_enum_values=True)\n    id: int = Field(\n        ...,\n        title=\"Justice ID Identifier\",\n        description=(\n            \"Starting from 1, the integer represents the order of appointment\"\n            \" to the Supreme Court.\"\n        ),\n        ge=1,\n        lt=1000,\n    )\n    full_name: str | None = Field(None)\n    first_name: str = Field(..., max_length=50)\n    last_name: str = Field(..., max_length=50)\n    suffix: Suffix | None = Field(None, max_length=4)\n    gender: Gender = Field(...)\n    alias: str | None = Field(\n        None,\n        title=\"Alias\",\n        description=\"Means of matching ponente and voting strings to the justice id.\",\n    )\n    start_term: datetime.date | None = Field(\n        None,\n        title=\"Start Term\",\n        description=\"Date of appointment.\",\n    )\n    end_term: datetime.date | None = Field(\n        None,\n        title=\"End Term\",\n        description=\"Date of termination.\",\n    )\n    chief_date: datetime.date | None = Field(\n        None,\n        title=\"Date Appointed As Chief Justice\",\n        description=(\n            \"When appointed, the extension title of the justice changes from\"\n            \" 'J.' to 'C.J'. for cases that are decided after the date of\"\n            \" appointment but before the date of retirement.\"\n        ),\n    )\n    birth_date: datetime.date | None = Field(\n        None,\n        title=\"Date of Birth\",\n        description=(\n            \"The Birth Date is used to determine the retirement age of the\"\n            \" justice. Under the 1987 constitution, this is\"\n            f\" {MAX_JUSTICE_AGE}. There are missing dates: see Jose Generoso\"\n            \" 41, Grant Trent 14, Fisher 19, Moir 20.\"\n        ),\n    )\n    retire_date: datetime.date | None = Field(\n        None,\n        title=\"Mandatory Retirement Date\",\n        description=(\n            \"Based on the Birth Date, if it exists, it is the maximum term of\"\n            \" service allowed by law.\"\n        ),\n    )\n    inactive_date: datetime.date | None = Field(\n        None,\n        title=\"Date\",\n        description=(\n            \"Which date is earliest inactive date of the Justice, the retire\"\n            \" date is set automatically but it is not guaranteed to to be the\"\n            \" actual inactive date. So the inactive date is either that\"\n            \" specified in the `end_term` or the `retire_date`, whichever is\"\n            \" earlier.\"\n        ),\n    )\n\n    @field_validator(\"retire_date\")\n    def retire_date_70_years(cls, v, values):\n        if v and values[\"birth_date\"]:\n            if values[\"birth_date\"] + rd(years=MAX_JUSTICE_AGE) != v:\n                raise ValueError(\"Must be 70 years from birth date.\")\n        return v\n\n    @classmethod\n    def from_data(cls, data: dict):\n        def extract_date(text: str | None) -&gt; datetime.date | None:\n            return parse(text).date() if text else None\n\n        # Not all justices have/need aliases; default needed\n        alias = data.pop(\"Alias\", None)\n        if not alias:\n            if surname := data.get(\"last_name\"):\n                if suffix := data.get(\"suffix\"):\n                    alias = f\"{surname} {suffix}\".lower()\n\n        retire_date = None\n        if dob := extract_date(data.pop(\"Born\")):\n            retire_date = dob + rd(years=MAX_JUSTICE_AGE)\n\n        # retire_date = latest date allowed; but if end_date present, use this\n        inactive_date = retire_date\n        if end_date := extract_date(data.pop(\"End of term\")):\n            inactive_date = end_date or retire_date\n\n        return cls(\n            id=data.pop(\"#\"),\n            full_name=data[\"full_name\"],\n            first_name=data[\"first_name\"],\n            last_name=data[\"last_name\"],\n            suffix=Suffix(data[\"suffix\"]),\n            gender=Gender(data[\"gender\"]),\n            alias=alias,\n            birth_date=dob,\n            start_term=extract_date(data.pop(\"Start of term\")),\n            end_term=end_date,\n            chief_date=extract_date(data.pop(\"Appointed chief\")),\n            retire_date=retire_date,\n            inactive_date=inactive_date,\n        )\n</code></pre>"},{"location":"#creating-a-justice-table","title":"Creating a Justice table","text":"<p>The source file for the sqlite database is <code>sc.yaml</code>. This ought to be edited whenever new justices are added. It is referenced via <code>JUSTICE_FILE</code>:</p> <p>Note the default table name used by <code>CandidateJustice</code> is \"justices\".</p> Python<pre><code>from corpus_judge import JUSTICE_FILE\nfrom sqlite_utils import Database\nfrom pathlib import Path\nimport yaml\n\ndef add_justices(db: Database):\n    tbl = db[\"justices\"] # default table name\n    if not tbl.exists():\n        file_content = JUSTICE_FILE.read_bytes()\n        records = yaml.safe_load(file_content)\n        tbl.insert_all(records, ignore=True)  # type: ignore\n\np = Path(\"new.db\")\ndb = Database(p)\nadd_justices(db)\n</code></pre>"},{"location":"#cleaning-raw-justice-names","title":"Cleaning Raw Justice Names","text":"<p>             Bases: <code>NamedTuple</code></p> Source code in <code>corpus_judge/justice_name.py</code> Python<pre><code>class OpinionWriterName(NamedTuple):\n    writer: str | None = None\n    per_curiam: bool = False\n\n    @classmethod\n    def extract(cls, text: str | None) -&gt; Self | None:\n        \"\"\"Will mark `per_curiam` to be True if the regex pattern matches,\n        else, will clean the writer represented by the text, if possible.\n\n        Examples:\n            &gt;&gt;&gt; OpinionWriterName.extract('Justice Marvic M.V.F. Leonen')\n            OpinionWriterName(writer='leonen', per_curiam=False)\n            &gt;&gt;&gt; OpinionWriterName.extract('Justice Filomena D. Signh') # note bad spelling\n            OpinionWriterName(writer='singh', per_curiam=False)\n\n        Args:\n            text (str | None): Text to evaluate.\n\n        Returns:\n            Self | None: Instance representing the writer.\n        \"\"\"  # noqa: E501\n        if not text:\n            return None\n        if text:\n            if IS_PER_CURIAM.search(text):\n                return cls(per_curiam=True)\n            # if text is modern, e.g. from the 2023 SC website, adjust the text\n            # prior to clean() since the clean function was intended for the\n            # more traditional elibrary.\n            text = limit_modern_to_terminal_text(text)\n            writer = cls.clean(text)  # check proper\n            return cls(writer=writer)\n\n    @classmethod\n    def clean(cls, text: str) -&gt; str | None:\n        \"\"\"Each `ponente` name stored in the database can be uniform. Will\n        parse text, apply some cleaning steps, and result in a lower-cased form\n        of the original `text`, e.g.:\n\n        Some constraints:\n\n        1. Must be more than 4 characters\n        2. Must be less than 40 characters\n\n        Examples:\n            &gt;&gt;&gt; OpinionWriterName.clean(\"REYES , J.B.L, Acting C.J.\") # sample name 1\n            'reyes, j.b.l.'\n            &gt;&gt;&gt; OpinionWriterName.clean(\"REYES, J, B. L. J.\") # sample name 2\n            'reyes, j.b.l.'\n        \"\"\"\n\n        no_asterisk = re.sub(r\"\\[?(\\*)+\\]?\", \"\", text)\n        name = initialize_name(no_asterisk)\n        no_suffix = TitleSuffix.cull(name).strip()\n        repl = CommonTypos.replace(no_suffix).strip()\n        res = repl + \".\" if repl.endswith((\" jr\", \" sr\")) else repl\n        return res if 4 &lt; len(res) &lt; 40 else None\n</code></pre>"},{"location":"#corpus_judge.justice_name.OpinionWriterName-functions","title":"Functions","text":""},{"location":"#corpus_judge.justice_name.OpinionWriterName.clean","title":"<code>clean(text)</code>  <code>classmethod</code>","text":"<p>Each <code>ponente</code> name stored in the database can be uniform. Will parse text, apply some cleaning steps, and result in a lower-cased form of the original <code>text</code>, e.g.:</p> <p>Some constraints:</p> <ol> <li>Must be more than 4 characters</li> <li>Must be less than 40 characters</li> </ol> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; OpinionWriterName.clean(\"REYES , J.B.L, Acting C.J.\") # sample name 1\n'reyes, j.b.l.'\n&gt;&gt;&gt; OpinionWriterName.clean(\"REYES, J, B. L. J.\") # sample name 2\n'reyes, j.b.l.'\n</code></pre> Source code in <code>corpus_judge/justice_name.py</code> Python<pre><code>@classmethod\ndef clean(cls, text: str) -&gt; str | None:\n    \"\"\"Each `ponente` name stored in the database can be uniform. Will\n    parse text, apply some cleaning steps, and result in a lower-cased form\n    of the original `text`, e.g.:\n\n    Some constraints:\n\n    1. Must be more than 4 characters\n    2. Must be less than 40 characters\n\n    Examples:\n        &gt;&gt;&gt; OpinionWriterName.clean(\"REYES , J.B.L, Acting C.J.\") # sample name 1\n        'reyes, j.b.l.'\n        &gt;&gt;&gt; OpinionWriterName.clean(\"REYES, J, B. L. J.\") # sample name 2\n        'reyes, j.b.l.'\n    \"\"\"\n\n    no_asterisk = re.sub(r\"\\[?(\\*)+\\]?\", \"\", text)\n    name = initialize_name(no_asterisk)\n    no_suffix = TitleSuffix.cull(name).strip()\n    repl = CommonTypos.replace(no_suffix).strip()\n    res = repl + \".\" if repl.endswith((\" jr\", \" sr\")) else repl\n    return res if 4 &lt; len(res) &lt; 40 else None\n</code></pre>"},{"location":"#corpus_judge.justice_name.OpinionWriterName.extract","title":"<code>extract(text)</code>  <code>classmethod</code>","text":"<p>Will mark <code>per_curiam</code> to be True if the regex pattern matches, else, will clean the writer represented by the text, if possible.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; OpinionWriterName.extract('Justice Marvic M.V.F. Leonen')\nOpinionWriterName(writer='leonen', per_curiam=False)\n&gt;&gt;&gt; OpinionWriterName.extract('Justice Filomena D. Signh') # note bad spelling\nOpinionWriterName(writer='singh', per_curiam=False)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str | None</code> <p>Text to evaluate.</p> required <p>Returns:</p> Type Description <code>Self | None</code> <p>Self | None: Instance representing the writer.</p> Source code in <code>corpus_judge/justice_name.py</code> Python<pre><code>@classmethod\ndef extract(cls, text: str | None) -&gt; Self | None:\n    \"\"\"Will mark `per_curiam` to be True if the regex pattern matches,\n    else, will clean the writer represented by the text, if possible.\n\n    Examples:\n        &gt;&gt;&gt; OpinionWriterName.extract('Justice Marvic M.V.F. Leonen')\n        OpinionWriterName(writer='leonen', per_curiam=False)\n        &gt;&gt;&gt; OpinionWriterName.extract('Justice Filomena D. Signh') # note bad spelling\n        OpinionWriterName(writer='singh', per_curiam=False)\n\n    Args:\n        text (str | None): Text to evaluate.\n\n    Returns:\n        Self | None: Instance representing the writer.\n    \"\"\"  # noqa: E501\n    if not text:\n        return None\n    if text:\n        if IS_PER_CURIAM.search(text):\n            return cls(per_curiam=True)\n        # if text is modern, e.g. from the 2023 SC website, adjust the text\n        # prior to clean() since the clean function was intended for the\n        # more traditional elibrary.\n        text = limit_modern_to_terminal_text(text)\n        writer = cls.clean(text)  # check proper\n        return cls(writer=writer)\n</code></pre>"},{"location":"#candidate-justice","title":"Candidate Justice","text":"<p>             Bases: <code>NamedTuple</code></p> Source code in <code>corpus_judge/justice_select.py</code> Python<pre><code>class CandidateJustice(NamedTuple):\n    db: Database\n    text: str | None = None\n    date_str: str | None = None\n    tablename: str = \"justices\"\n\n    @property\n    def valid_date(self) -&gt; datetime.date | None:\n        if not self.date_str:\n            return None\n        try:\n            return parse(self.date_str).date()\n        except Exception:\n            return None\n\n    @property\n    def src(self):\n        return OpinionWriterName.extract(self.text)\n\n    @property\n    def candidate(self) -&gt; str | None:\n        return self.src and self.src.writer\n\n    @property\n    def table(self) -&gt; Table:\n        res = self.db[self.tablename]\n        if isinstance(res, Table):\n            return res\n        raise Exception(\"Not a valid table.\")\n\n    @property\n    def rows(self) -&gt; list[dict]:\n        \"\"\"When selecting a ponente or voting members, create a candidate list of\n        justices based on the `valid_date`.\n\n        Returns:\n            list[dict]: Filtered list of justices\n        \"\"\"  # noqa: E501\n        if not self.valid_date:\n            return []\n        criteria = \"inactive_date &gt; :date and :date &gt; start_term\"\n        params = {\"date\": self.valid_date.isoformat()}\n        results = self.table.rows_where(\n            where=criteria,\n            where_args=params,\n            select=(\n                \"id, full_name, lower(last_name) surname, alias, start_term,\"\n                \" inactive_date, chief_date\"\n            ),\n            order_by=\"start_term desc\",\n        )\n        justice_list = list(results)\n        sorted_list = sorted(justice_list, key=lambda d: d[\"id\"])\n        return sorted_list\n\n    @property\n    def choice(self) -&gt; dict | None:\n        \"\"\"Based on `@rows`, match the cleaned_name to either the alias\n        of the justice or the justice's last name; on match, determine whether the\n        designation should be 'C.J.' or 'J.'\n        \"\"\"  # noqa: E501\n        candidate_options = []\n        if not self.valid_date:\n            return None\n\n        if self.text:\n            # Special rule for duplicate last names\n            if \"Lopez\" in self.text:\n                if \"jhosep\" in self.text.lower():\n                    for candidate in self.rows:\n                        if int(candidate[\"id\"]) == 190:\n                            candidate_options.append(candidate)\n                elif \"mario\" in self.text.lower():\n                    for candidate in self.rows:\n                        if int(candidate[\"id\"]) == 185:\n                            candidate_options.append(candidate)\n\n        # only proceed to add more options if special rule not met\n        if not candidate_options:\n            if not self.candidate:\n                return None\n\n            for candidate in self.rows:\n                if candidate[\"alias\"] and candidate[\"alias\"] == self.candidate:\n                    candidate_options.append(candidate)\n                    continue\n                elif candidate[\"surname\"] == self.candidate:\n                    candidate_options.append(candidate)\n                    continue\n\n        if candidate_options:\n            if len(candidate_options) == 1:\n                res = candidate_options[0]\n                res.pop(\"alias\")\n                res[\"surname\"] = res[\"surname\"].title()\n                res[\"designation\"] = \"J.\"\n                if chief_date := res.get(\"chief_date\"):\n                    s = parse(chief_date).date()\n                    e = parse(res[\"inactive_date\"]).date()\n                    if s &lt; self.valid_date &lt; e:\n                        res[\"designation\"] = \"C.J.\"\n                return res\n            else:\n                msg = f\"Too many {candidate_options=} for {self.candidate=} on {self.valid_date=}. Consider manual intervention.\"  # noqa: E501\n                logging.error(msg)\n\n        if self.text:\n            if matches := get_close_matches(\n                self.text,\n                possibilities=[row[\"full_name\"] for row in self.rows],\n                n=1,\n                cutoff=0.7,\n            ):\n                if options := list(\n                    self.db[self.tablename].rows_where(\n                        \"full_name = ?\", where_args=(matches[0],)\n                    )\n                ):\n                    res: dict[str, str] = {}\n                    selected = options[0]\n                    res[\"id\"] = selected[\"id\"]\n                    res[\"surname\"] = selected[\"last_name\"]\n                    res[\"designation\"] = \"J.\"\n                    if chief_date := selected.get(\"chief_date\"):\n                        s = parse(chief_date).date()\n                        e = parse(res[\"inactive_date\"]).date()\n                        if s &lt; self.valid_date &lt; e:\n                            res[\"designation\"] = \"C.J.\"\n                    return res\n\n        return None\n\n    @property\n    def detail(self) -&gt; JusticeDetail | None:\n        \"\"\"Get object to match fields directly\n\n        Returns:\n            JusticeDetail | None: Can subsequently be used in third-party library.\n        \"\"\"  # noqa: E501\n        if not self.src:\n            return None\n\n        if self.src.per_curiam:\n            return JusticeDetail(\n                justice_id=None,\n                raw_ponente=None,\n                designation=None,\n                per_curiam=True,\n            )\n        elif self.choice and self.choice.get(\"id\", None):\n            digit_id = int(self.choice[\"id\"])\n            return JusticeDetail(\n                justice_id=digit_id,\n                raw_ponente=self.choice[\"surname\"],\n                designation=self.choice[\"designation\"],\n                per_curiam=False,\n            )\n        return None\n\n    @property\n    def id(self) -&gt; int | None:\n        return self.detail.justice_id if self.detail else None\n\n    @property\n    def per_curiam(self) -&gt; bool:\n        return self.detail.per_curiam if self.detail else False\n\n    @property\n    def raw_ponente(self) -&gt; str | None:\n        return self.detail.raw_ponente if self.detail else None\n\n    @property\n    def ponencia(self) -&gt; dict[str, Any]:\n        \"\"\"Produces a dict of partial fields that include the following keys:\n\n        1. `justice_id`: int\n        2. `raw_ponente`: str\n        3. `per_curiam`: bool\n        \"\"\"\n        return {\n            \"justice_id\": self.id,\n            \"raw_ponente\": self.raw_ponente,\n            \"per_curiam\": self.per_curiam,\n        }\n</code></pre>"},{"location":"#corpus_judge.justice_select.CandidateJustice-attributes","title":"Attributes","text":""},{"location":"#corpus_judge.justice_select.CandidateJustice.choice","title":"<code>choice: dict | None</code>  <code>property</code>","text":"<p>Based on <code>@rows</code>, match the cleaned_name to either the alias of the justice or the justice's last name; on match, determine whether the designation should be 'C.J.' or 'J.'</p>"},{"location":"#corpus_judge.justice_select.CandidateJustice.detail","title":"<code>detail: JusticeDetail | None</code>  <code>property</code>","text":"<p>Get object to match fields directly</p> <p>Returns:</p> Type Description <code>JusticeDetail | None</code> <p>JusticeDetail | None: Can subsequently be used in third-party library.</p>"},{"location":"#corpus_judge.justice_select.CandidateJustice.ponencia","title":"<code>ponencia: dict[str, Any]</code>  <code>property</code>","text":"<p>Produces a dict of partial fields that include the following keys:</p> <ol> <li><code>justice_id</code>: int</li> <li><code>raw_ponente</code>: str</li> <li><code>per_curiam</code>: bool</li> </ol>"},{"location":"#corpus_judge.justice_select.CandidateJustice.rows","title":"<code>rows: list[dict]</code>  <code>property</code>","text":"<p>When selecting a ponente or voting members, create a candidate list of justices based on the <code>valid_date</code>.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: Filtered list of justices</p>"},{"location":"#view-chief-justice-dates","title":"View chief justice dates","text":"SQL<pre><code>WITH end_chief_date(d) AS (\n    -- For each chief justice, get a second date: the date that the next chief justice is appointed; Can get this by getting the first chief date greater than the present chief date and using an ascending order. */\n    SELECT\n        DATE(\n            tbl2.chief_date,\n            '-1 day'\n        )\n    FROM\n        {{ justice_table }}\n        tbl2\n    WHERE\n        tbl2.chief_date IS NOT NULL\n        AND tbl2.chief_date &gt; tbl1.chief_date\n    ORDER BY\n        tbl2.chief_date ASC\n    LIMIT\n        1\n), time_as_chief(period) AS (\n    -- Difference between the two chief dates: that will be the time served as chief in years format */\n    SELECT\n        (\n            SELECT\n                DATE(d)\n            FROM\n                end_chief_date\n        ) - DATE(\n            tbl1.chief_date\n        )\n)\nSELECT\n    tbl1.id,\n    tbl1.last_name,\n    tbl1.chief_date,\n    (\n        SELECT\n            d\n        FROM\n            end_chief_date\n    ) max_end_chief_date,\n    MIN(\n        tbl1.inactive_date,\n        (\n            SELECT\n                d\n            FROM\n                end_chief_date\n        )\n    ) actual_inactive_as_chief,\n    (\n        SELECT\n            period\n        FROM\n            time_as_chief\n    ) years_as_chief\nFROM\n    {{ justice_table }}\n    tbl1\nWHERE\n    tbl1.chief_date IS NOT NULL\nORDER BY\n    tbl1.chief_date DESC\n</code></pre> Python<pre><code>[\n    {\n        'id': 178,\n        'last_name': 'Gesmundo',\n        'chief_date': '2021-04-05',\n        'max_end_chief_date': None,\n        'actual_inactive_as_chief': None,\n        'years_as_chief': None\n    },\n    {\n        'id': 162,\n        'last_name': 'Peralta',\n        'chief_date': '2019-10-23',\n        'max_end_chief_date': '2021-04-04',\n        'actual_inactive_as_chief': '2021-03-27',\n        'years_as_chief': 2\n    },\n    {\n        'id': 163,\n        'last_name': 'Bersamin',\n        'chief_date': '2018-11-26',\n        'max_end_chief_date': '2019-10-22',\n        'actual_inactive_as_chief': '2019-10-18',\n        'years_as_chief': 1\n    },\n    {\n        'id': 160,\n        'last_name': 'Leonardo-De Castro',\n        'chief_date': '2018-08-28',\n        'max_end_chief_date': '2018-11-25',\n        'actual_inactive_as_chief': '2018-10-08',\n        'years_as_chief': 0\n    }...\n]\n</code></pre>"}]}