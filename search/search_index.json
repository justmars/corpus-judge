{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Justice","text":"<p>A Justice, as defined in this reference document, is one of many justices sitting in the Supreme Court:</p> <p>         Bases: <code>Bio</code></p>"},{"location":"#corpus_judge.justice_model.Justice--justice","title":"Justice","text":"Field Type Description id int Unique identifier of the Justice based on appointment roster full_name str First + last + suffix first_name str - last_name str - suffix str e.g. Jr., Sr., III, etc. nick_name str - gender str - alias str Other names start_term str Time justice appointed end_term str Time justice chief_date str Date appointed as Chief Justice (optional) birth_date str Date of birth retire_date str Based on the Birth Date, if it exists, it is the maximum term of service allowed by law. inactive_date str Which date is earliest inactive date of the Justice, the retire date is set automatically but it is not guaranteed to to be the actual inactive date. So the inactive date is either that specified in the <code>end_term</code> or the <code>retire_date</code>, whichever is earlier. <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; # See database\n&gt;&gt;&gt; from sqlpyd import Connection\n&gt;&gt;&gt; from sqlite_utils.db import Table\n&gt;&gt;&gt; c = Connection(DatabasePath=\"test.db\")\n&gt;&gt;&gt; c.path_to_db.unlink(missing_ok=True) # tear down\n&gt;&gt;&gt; table = c.create_table(Justice)\n&gt;&gt;&gt; isinstance(table, Table)\nTrue\n&gt;&gt;&gt; # See local file\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; f = Path(__file__).parent / \"sc.yaml\"\n&gt;&gt;&gt; f.exists()\nTrue\n&gt;&gt;&gt; # Can add all pydantic validated records from the local copy of justices to the database.\n&gt;&gt;&gt; import yaml\n&gt;&gt;&gt; res = c.add_records(Justice, yaml.safe_load(f.read_bytes()))\n&gt;&gt;&gt; len(list(table.rows))\n194\n&gt;&gt;&gt; c.path_to_db.unlink() # tear down\n</code></pre> <p>The list of justices from the sc.yaml file are parsed through this model prior to being inserted into the database.</p> Source code in <code>corpus_judge/justice_model.py</code> Python<pre><code>class Justice(Bio):\n\"\"\"\n    # Justice\n    Field | Type | Description\n    --:|:--|:--\n    id |int | Unique identifier of the Justice based on appointment roster\n    full_name |str | First + last + suffix\n    first_name |str | -\n    last_name |str | -\n    suffix |str | e.g. Jr., Sr., III, etc.\n    nick_name |str | -\n    gender |str | -\n    alias |str | Other names\n    start_term |str | Time justice appointed\n    end_term |str | Time justice\n    chief_date |str | Date appointed as Chief Justice (optional)\n    birth_date |str | Date of birth\n    retire_date |str | Based on the Birth Date, if it exists, it is the maximum term of service allowed by law.\n    inactive_date |str | Which date is earliest inactive date of the Justice, the retire date is set automatically but it is not guaranteed to to be the actual inactive date. So the inactive date is either that specified in the `end_term` or the `retire_date`, whichever is earlier.\n    Examples:\n        &gt;&gt;&gt; # See database\n        &gt;&gt;&gt; from sqlpyd import Connection\n        &gt;&gt;&gt; from sqlite_utils.db import Table\n        &gt;&gt;&gt; c = Connection(DatabasePath=\"test.db\")\n        &gt;&gt;&gt; c.path_to_db.unlink(missing_ok=True) # tear down\n        &gt;&gt;&gt; table = c.create_table(Justice)\n        &gt;&gt;&gt; isinstance(table, Table)\n        True\n        &gt;&gt;&gt; # See local file\n        &gt;&gt;&gt; from pathlib import Path\n        &gt;&gt;&gt; f = Path(__file__).parent / \"sc.yaml\"\n        &gt;&gt;&gt; f.exists()\n        True\n        &gt;&gt;&gt; # Can add all pydantic validated records from the local copy of justices to the database.\n        &gt;&gt;&gt; import yaml\n        &gt;&gt;&gt; res = c.add_records(Justice, yaml.safe_load(f.read_bytes()))\n        &gt;&gt;&gt; len(list(table.rows))\n        194\n        &gt;&gt;&gt; c.path_to_db.unlink() # tear down\n    The list of justices from the sc.yaml file are parsed through this model prior to being inserted\n    into the database.\n    \"\"\"  # noqa: E501\n__prefix__ = \"sc\"\n__tablename__ = \"justices\"\n__indexes__ = [\n[\"last_name\", \"alias\", \"start_term\", \"inactive_date\"],\n[\"start_term\", \"inactive_date\"],\n[\"last_name\", \"alias\"],\n]\nid: int = Field(\n...,\ntitle=\"Justice ID Identifier\",\ndescription=(\n\"Starting from 1, the integer represents the order of appointment\"\n\" to the Supreme Court.\"\n),\nge=1,\nlt=1000,\ncol=int,\n)\nalias: str | None = Field(\nNone,\ntitle=\"Alias\",\ndescription=\"Means of matching ponente and voting strings to the justice id.\",\ncol=str,\nindex=True,\n)\nstart_term: datetime.date | None = Field(\nNone,\ntitle=\"Start Term\",\ndescription=\"Date of appointment.\",\ncol=datetime.date,\nindex=True,\n)\nend_term: datetime.date | None = Field(\nNone,\ntitle=\"End Term\",\ndescription=\"Date of termination.\",\ncol=datetime.date,\nindex=True,\n)\nchief_date: datetime.date | None = Field(\nNone,\ntitle=\"Date Appointed As Chief Justice\",\ndescription=(\n\"When appointed, the extension title of the justice changes from\"\n\" 'J.' to 'C.J'. for cases that are decided after the date of\"\n\" appointment but before the date of retirement.\"\n),\ncol=datetime.date,\nindex=True,\n)\nbirth_date: datetime.date | None = Field(\nNone,\ntitle=\"Date of Birth\",\ndescription=(\n\"The Birth Date is used to determine the retirement age of the\"\n\" justice. Under the 1987 constitution, this is\"\nf\" {MAX_JUSTICE_AGE}. There are missing dates: see Jose Generoso\"\n\" 41, Grant Trent 14, Fisher 19, Moir 20.\"\n),\ncol=datetime.date,\nindex=True,\n)\nretire_date: datetime.date | None = Field(\nNone,\ntitle=\"Mandatory Retirement Date\",\ndescription=(\n\"Based on the Birth Date, if it exists, it is the maximum term of\"\n\" service allowed by law.\"\n),\ncol=datetime.date,\nindex=True,\n)\ninactive_date: datetime.date | None = Field(\nNone,\ntitle=\"Date\",\ndescription=(\n\"Which date is earliest inactive date of the Justice, the retire\"\n\" date is set automatically but it is not guaranteed to to be the\"\n\" actual inactive date. So the inactive date is either that\"\n\" specified in the `end_term` or the `retire_date`, whichever is\"\n\" earlier.\"\n),\ncol=datetime.date,\nindex=True,\n)\n@validator(\"retire_date\")\ndef retire_date_70_years(cls, v, values):\nif v and values[\"birth_date\"]:\nif values[\"birth_date\"] + rd(years=MAX_JUSTICE_AGE) != v:\nraise ValueError(\"Must be 70 years from birth date.\")\nreturn v\nclass Config:\nuse_enum_values = True\n@classmethod\ndef from_data(cls, data: dict):\ndef extract_date(text: str | None) -&gt; datetime.date | None:\nreturn parse(text).date() if text else None\nbio = Bio.from_dict(data)\n# Not all have aliases; default needed\nalias = data.pop(\"Alias\", None)\nif not alias:\nif bio.last_name and bio.suffix:\nalias = f\"{bio.last_name} {bio.suffix}\".lower()\nretire_date = None\nif dob := extract_date(data.pop(\"Born\")):\nretire_date = dob + rd(years=MAX_JUSTICE_AGE)\n# Assume that the retire_date is latest possible date of inactivity\n# but if end_date is present, use this instead\ninactive_date = retire_date\nif end_date := extract_date(data.pop(\"End of term\")):\ninactive_date = end_date or retire_date\nreturn cls(\n**bio.dict(exclude_none=True),\nid=data.pop(\"#\"),\nalias=alias,\nbirth_date=dob,\nstart_term=extract_date(data.pop(\"Start of term\")),\nend_term=end_date,\nchief_date=extract_date(data.pop(\"Appointed chief\")),\nretire_date=retire_date,\ninactive_date=inactive_date,\n)\n</code></pre>"},{"location":"#cleaning-raw-justice-names","title":"Cleaning Raw Justice Names","text":"<p>         Bases: <code>NamedTuple</code></p> Source code in <code>corpus_judge/justice_name.py</code> Python<pre><code>class OpinionWriterName(NamedTuple):\nwriter: str | None = None\nper_curiam: bool = False\n@classmethod\ndef extract(cls, text: str | None) -&gt; Self | None:\n\"\"\"Will mark `per_curiam` to be True if the regex pattern matches,\n        else, will clean the writer represented by the text, if possible.\n        Args:\n            text (str | None): Text to evaluate.\n        Returns:\n            Self | None: Instance representing the writer.\n        \"\"\"\nif not text:\nreturn None\nif text:\nif IS_PER_CURIAM.search(text):\nreturn cls(per_curiam=True)\nreturn cls(writer=cls.clean(text))\n@classmethod\ndef clean(cls, text: str) -&gt; str | None:\n\"\"\"Each `ponente` name stored in the database can me uniform, e.g.:\n        Examples:\n            &gt;&gt;&gt; OpinionWriterName.clean(\"REYES , J.B.L, Acting C.J.\") # sample name 1\n            'reyes, j.b.l.'\n            &gt;&gt;&gt; OpinionWriterName.clean(\"REYES, J, B. L. J.\") # sample name 2\n            'reyes, j.b.l.'\n        \"\"\"\nno_asterisk = re.sub(r\"\\[?(\\*)+\\]?\", \"\", text)\nsurname = init_surnames(no_asterisk)\nno_suffix = TitleSuffixClean.clean_end(surname).strip()\nrepl = CommonTypos.replace_value(no_suffix).strip()\nres = repl + \".\" if repl.endswith((\" jr\", \" sr\")) else repl\nreturn res if 4 &lt; len(res) &lt; 20 else None\n</code></pre>"},{"location":"#corpus_judge.justice_name.OpinionWriterName-functions","title":"Functions","text":""},{"location":"#corpus_judge.justice_name.OpinionWriterName.clean","title":"<code>clean(text)</code>  <code>classmethod</code>","text":"<p>Each <code>ponente</code> name stored in the database can me uniform, e.g.:</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; OpinionWriterName.clean(\"REYES , J.B.L, Acting C.J.\") # sample name 1\n'reyes, j.b.l.'\n&gt;&gt;&gt; OpinionWriterName.clean(\"REYES, J, B. L. J.\") # sample name 2\n'reyes, j.b.l.'\n</code></pre> Source code in <code>corpus_judge/justice_name.py</code> Python<pre><code>@classmethod\ndef clean(cls, text: str) -&gt; str | None:\n\"\"\"Each `ponente` name stored in the database can me uniform, e.g.:\n    Examples:\n        &gt;&gt;&gt; OpinionWriterName.clean(\"REYES , J.B.L, Acting C.J.\") # sample name 1\n        'reyes, j.b.l.'\n        &gt;&gt;&gt; OpinionWriterName.clean(\"REYES, J, B. L. J.\") # sample name 2\n        'reyes, j.b.l.'\n    \"\"\"\nno_asterisk = re.sub(r\"\\[?(\\*)+\\]?\", \"\", text)\nsurname = init_surnames(no_asterisk)\nno_suffix = TitleSuffixClean.clean_end(surname).strip()\nrepl = CommonTypos.replace_value(no_suffix).strip()\nres = repl + \".\" if repl.endswith((\" jr\", \" sr\")) else repl\nreturn res if 4 &lt; len(res) &lt; 20 else None\n</code></pre>"},{"location":"#corpus_judge.justice_name.OpinionWriterName.extract","title":"<code>extract(text)</code>  <code>classmethod</code>","text":"<p>Will mark <code>per_curiam</code> to be True if the regex pattern matches, else, will clean the writer represented by the text, if possible.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str | None</code> <p>Text to evaluate.</p> required <p>Returns:</p> Type Description <code>Self | None</code> <p>Self | None: Instance representing the writer.</p> Source code in <code>corpus_judge/justice_name.py</code> Python<pre><code>@classmethod\ndef extract(cls, text: str | None) -&gt; Self | None:\n\"\"\"Will mark `per_curiam` to be True if the regex pattern matches,\n    else, will clean the writer represented by the text, if possible.\n    Args:\n        text (str | None): Text to evaluate.\n    Returns:\n        Self | None: Instance representing the writer.\n    \"\"\"\nif not text:\nreturn None\nif text:\nif IS_PER_CURIAM.search(text):\nreturn cls(per_curiam=True)\nreturn cls(writer=cls.clean(text))\n</code></pre>"},{"location":"#candidate-justice","title":"Candidate Justice","text":"<p>         Bases: <code>NamedTuple</code></p> Source code in <code>corpus_judge/justice_select.py</code> Python<pre><code>class CandidateJustice(NamedTuple):\ndb: Database\ntext: str | None = None\ndate_str: str | None = None\n@property\ndef valid_date(self) -&gt; datetime.date | None:\nif not self.date_str:\nreturn None\ntry:\nreturn parse(self.date_str).date()\nexcept Exception:\nreturn None\n@property\ndef src(self):\nreturn OpinionWriterName.extract(self.text)\n@property\ndef candidate(self) -&gt; str | None:\nreturn self.src and self.src.writer\n@property\ndef table(self) -&gt; Table:\nres = self.db[Justice.__tablename__]\nif isinstance(res, Table):\nreturn res\nraise Exception(\"Not a valid table.\")\n@property\ndef rows(self) -&gt; list[dict]:\n\"\"\"When selecting a ponente or voting members, create a candidate list of\n        justices based on the `valid_date`.\n        Examples:\n            &gt;&gt;&gt; import yaml\n            &gt;&gt;&gt; from pathlib import Path\n            &gt;&gt;&gt; from sqlpyd import Connection\n            &gt;&gt;&gt; p = Path(__file__).parent / \"sc.yaml\"\n            &gt;&gt;&gt; c = Connection(DatabasePath=\"test.db\")\n            &gt;&gt;&gt; c.path_to_db.unlink(missing_ok=True) # tear down\n            &gt;&gt;&gt; tbl = c.create_table(Justice)\n            &gt;&gt;&gt; res = c.add_records(Justice, yaml.safe_load(p.read_bytes()))\n            &gt;&gt;&gt; search = CandidateJustice(db=c.db, date_str='Dec. 1, 1995')\n            &gt;&gt;&gt; print(search.rows) # since start date is greater than target date, record is included\n            [{'id': 137, 'surname': 'panganiban', 'alias': None, 'start_term': '1995-10-05', 'inactive_date': '2006-12-06', 'chief_date': '2005-12-20'}, {'id': 136, 'surname': 'hermosisima', 'alias': 'hermosisima jr.', 'start_term': '1995-01-10', 'inactive_date': '1997-10-18', 'chief_date': None}, {'id': 135, 'surname': 'francisco', 'alias': None, 'start_term': '1995-01-05', 'inactive_date': '1998-02-13', 'chief_date': None}, {'id': 134, 'surname': 'mendoza', 'alias': None, 'start_term': '1994-06-07', 'inactive_date': '2003-04-05', 'chief_date': None}, {'id': 133, 'surname': 'kapunan', 'alias': None, 'start_term': '1994-01-05', 'inactive_date': '2002-08-12', 'chief_date': None}, {'id': 132, 'surname': 'vitug', 'alias': None, 'start_term': '1993-06-28', 'inactive_date': '2004-07-15', 'chief_date': None}, {'id': 131, 'surname': 'puno', 'alias': None, 'start_term': '1993-06-28', 'inactive_date': '2010-05-17', 'chief_date': '2007-12-08'}, {'id': 128, 'surname': 'melo', 'alias': None, 'start_term': '1992-08-10', 'inactive_date': '2002-05-30', 'chief_date': None}, {'id': 127, 'surname': 'bellosillo', 'alias': None, 'start_term': '1992-03-03', 'inactive_date': '2003-11-13', 'chief_date': None}, {'id': 125, 'surname': 'romero', 'alias': None, 'start_term': '1991-10-21', 'inactive_date': '1999-08-01', 'chief_date': None}, {'id': 124, 'surname': 'davide', 'alias': 'davide jr.', 'start_term': '1991-01-24', 'inactive_date': '2005-12-20', 'chief_date': '1998-11-30'}, {'id': 123, 'surname': 'regalado', 'alias': None, 'start_term': '1988-07-29', 'inactive_date': '1998-10-13', 'chief_date': None}, {'id': 116, 'surname': 'padilla', 'alias': None, 'start_term': '1987-01-12', 'inactive_date': '1997-08-22', 'chief_date': None}, {'id': 115, 'surname': 'feliciano', 'alias': None, 'start_term': '1986-08-08', 'inactive_date': '1995-12-13', 'chief_date': None}, {'id': 112, 'surname': 'narvasa', 'alias': None, 'start_term': '1986-04-10', 'inactive_date': '1998-11-30', 'chief_date': '1991-12-08'}]\n            &gt;&gt;&gt; c.path_to_db.unlink() # tear down\n        Returns:\n            list[dict]: Filtered list of justices\n        \"\"\"  # noqa: E501\nif not self.valid_date:\nreturn []\ncriteria = \"inactive_date &gt; :date and :date &gt; start_term\"\nparams = {\"date\": self.valid_date.isoformat()}\nresults = self.table.rows_where(\nwhere=criteria,\nwhere_args=params,\nselect=(\n\"id, lower(last_name) surname, alias, start_term,\"\n\" inactive_date, chief_date\"\n),\norder_by=\"start_term desc\",\n)\nreturn list(results)\n@property\ndef choice(self) -&gt; dict | None:\n\"\"\"Based on `get_active_on_date()`, match the cleaned_name to either the alias\n        of the justice or the justice's last name; on match, determine whether the\n        designation should be 'C.J.' or 'J.'\n        Examples:\n            &gt;&gt;&gt; import yaml\n            &gt;&gt;&gt; from pathlib import Path\n            &gt;&gt;&gt; from sqlpyd import Connection\n            &gt;&gt;&gt; p = Path(__file__).parent / \"sc.yaml\"\n            &gt;&gt;&gt; c = Connection(DatabasePath=\"test.db\")\n            &gt;&gt;&gt; c.path_to_db.unlink(missing_ok=True) # tear down\n            &gt;&gt;&gt; tbl = c.create_table(Justice)\n            &gt;&gt;&gt; res = c.add_records(Justice, yaml.safe_load(p.read_bytes()))\n            &gt;&gt;&gt; search = CandidateJustice(db=c.db, text='Panganiban, Acting Cj', date_str='Dec. 1, 1995')\n            &gt;&gt;&gt; print(search.choice) # note variance in text designation as acting CJ. vs. J.\n            {'id': 137, 'surname': 'Panganiban', 'start_term': '1995-10-05', 'inactive_date': '2006-12-06', 'chief_date': '2005-12-20', 'designation': 'J.'}\n            &gt;&gt;&gt; # Note that the raw information above contains 'Acting Cj' and thus the designation is only 'J.' At present we only track 'C.J.' and 'J.' titles.\n            &gt;&gt;&gt; # With a different date, we can get the 'C.J.' designation.:\n            &gt;&gt;&gt; search_cj = CandidateJustice(db=c.db, text='Panganiban', date_str='2006-03-30')\n            &gt;&gt;&gt; print(search_cj.choice) # note variance in text designation as acting CJ. vs. J.\n            {'id': 137, 'surname': 'Panganiban', 'start_term': '1995-10-05', 'inactive_date': '2006-12-06', 'chief_date': '2005-12-20', 'designation': 'C.J.'}\n            &gt;&gt;&gt; c.path_to_db.unlink() # tear down\n        \"\"\"  # noqa: E501\nopts = []\nif not self.valid_date:\nreturn None\nif not self.candidate:\nreturn None\nfor candidate in self.rows:\nif candidate[\"alias\"] and candidate[\"alias\"] == self.candidate:\nopts.append(candidate)\ncontinue\nelif candidate[\"surname\"] == self.candidate:\nopts.append(candidate)\ncontinue\nif opts:\nif len(opts) == 1:\nres = opts[0]\nres.pop(\"alias\")\nres[\"surname\"] = res[\"surname\"].title()\nres[\"designation\"] = \"J.\"\nif chief_date := res.get(\"chief_date\"):\ns = parse(chief_date).date()\ne = parse(res[\"inactive_date\"]).date()\nif s &lt; self.valid_date &lt; e:\nres[\"designation\"] = \"C.J.\"\nreturn res\nelse:\nprint(f\"Many {opts=} for {self.candidate=} on {self.valid_date=}\")\nreturn None\n@property\ndef detail(self) -&gt; JusticeDetail | None:\n\"\"\"Get object to match fields directly\n        Examples:\n            &gt;&gt;&gt; import yaml\n            &gt;&gt;&gt; from pathlib import Path\n            &gt;&gt;&gt; from sqlpyd import Connection\n            &gt;&gt;&gt; p = Path(__file__).parent / \"sc.yaml\"\n            &gt;&gt;&gt; c = Connection(DatabasePath=\"test.db\")\n            &gt;&gt;&gt; c.path_to_db.unlink(missing_ok=True) # tear down\n            &gt;&gt;&gt; tbl = c.create_table(Justice)\n            &gt;&gt;&gt; res = c.add_records(Justice, yaml.safe_load(p.read_bytes()))\n            &gt;&gt;&gt; search = CandidateJustice(db=c.db, text='Panganiban, Acting Cj', date_str='Dec. 1, 1995')\n            &gt;&gt;&gt; print(search.detail)\n            JusticeDetail(justice_id=137, raw_ponente='Panganiban', designation='J.', per_curiam=False)\n            &gt;&gt;&gt; c.path_to_db.unlink() # tear down\n        Returns:\n            JusticeDetail | None: Will subsequently be used in DecisionRow in a third-party library.\n        \"\"\"  # noqa: E501\nif not self.src:\nreturn None\nif self.src.per_curiam:\nreturn JusticeDetail(\njustice_id=None,\nraw_ponente=None,\ndesignation=None,\nper_curiam=True,\n)\nelif self.choice and self.choice.get(\"id\", None):\ndigit_id = int(self.choice[\"id\"])\nreturn JusticeDetail(\njustice_id=digit_id,\nraw_ponente=self.choice[\"surname\"],\ndesignation=self.choice[\"designation\"],\nper_curiam=False,\n)\nreturn None\n@property\ndef id(self) -&gt; int | None:\nreturn self.detail.justice_id if self.detail else None\n@property\ndef per_curiam(self) -&gt; bool:\nreturn self.detail.per_curiam if self.detail else False\n@property\ndef raw_ponente(self) -&gt; str | None:\nreturn self.detail.raw_ponente if self.detail else None\n@property\ndef ponencia(self) -&gt; dict[str, Any]:\n\"\"\"Produces a dict of partial fields that include the following keys:\n        1. `justice_id`: int\n        2. `raw_ponente`: str\n        3. `per_curiam`: bool\n        \"\"\"\nreturn {\n\"justice_id\": self.id,\n\"raw_ponente\": self.raw_ponente,\n\"per_curiam\": self.per_curiam,\n}\n</code></pre>"},{"location":"#corpus_judge.justice_select.CandidateJustice-attributes","title":"Attributes","text":""},{"location":"#corpus_judge.justice_select.CandidateJustice.choice","title":"<code>choice: dict | None</code>  <code>property</code>","text":"<p>Based on <code>get_active_on_date()</code>, match the cleaned_name to either the alias of the justice or the justice's last name; on match, determine whether the designation should be 'C.J.' or 'J.'</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import yaml\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from sqlpyd import Connection\n&gt;&gt;&gt; p = Path(__file__).parent / \"sc.yaml\"\n&gt;&gt;&gt; c = Connection(DatabasePath=\"test.db\")\n&gt;&gt;&gt; c.path_to_db.unlink(missing_ok=True) # tear down\n&gt;&gt;&gt; tbl = c.create_table(Justice)\n&gt;&gt;&gt; res = c.add_records(Justice, yaml.safe_load(p.read_bytes()))\n&gt;&gt;&gt; search = CandidateJustice(db=c.db, text='Panganiban, Acting Cj', date_str='Dec. 1, 1995')\n&gt;&gt;&gt; print(search.choice) # note variance in text designation as acting CJ. vs. J.\n{'id': 137, 'surname': 'Panganiban', 'start_term': '1995-10-05', 'inactive_date': '2006-12-06', 'chief_date': '2005-12-20', 'designation': 'J.'}\n&gt;&gt;&gt; # Note that the raw information above contains 'Acting Cj' and thus the designation is only 'J.' At present we only track 'C.J.' and 'J.' titles.\n&gt;&gt;&gt; # With a different date, we can get the 'C.J.' designation.:\n&gt;&gt;&gt; search_cj = CandidateJustice(db=c.db, text='Panganiban', date_str='2006-03-30')\n&gt;&gt;&gt; print(search_cj.choice) # note variance in text designation as acting CJ. vs. J.\n{'id': 137, 'surname': 'Panganiban', 'start_term': '1995-10-05', 'inactive_date': '2006-12-06', 'chief_date': '2005-12-20', 'designation': 'C.J.'}\n&gt;&gt;&gt; c.path_to_db.unlink() # tear down\n</code></pre>"},{"location":"#corpus_judge.justice_select.CandidateJustice.detail","title":"<code>detail: JusticeDetail | None</code>  <code>property</code>","text":"<p>Get object to match fields directly</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import yaml\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from sqlpyd import Connection\n&gt;&gt;&gt; p = Path(__file__).parent / \"sc.yaml\"\n&gt;&gt;&gt; c = Connection(DatabasePath=\"test.db\")\n&gt;&gt;&gt; c.path_to_db.unlink(missing_ok=True) # tear down\n&gt;&gt;&gt; tbl = c.create_table(Justice)\n&gt;&gt;&gt; res = c.add_records(Justice, yaml.safe_load(p.read_bytes()))\n&gt;&gt;&gt; search = CandidateJustice(db=c.db, text='Panganiban, Acting Cj', date_str='Dec. 1, 1995')\n&gt;&gt;&gt; print(search.detail)\nJusticeDetail(justice_id=137, raw_ponente='Panganiban', designation='J.', per_curiam=False)\n&gt;&gt;&gt; c.path_to_db.unlink() # tear down\n</code></pre> <p>Returns:</p> Type Description <code>JusticeDetail | None</code> <p>JusticeDetail | None: Will subsequently be used in DecisionRow in a third-party library.</p>"},{"location":"#corpus_judge.justice_select.CandidateJustice.ponencia","title":"<code>ponencia: dict[str, Any]</code>  <code>property</code>","text":"<p>Produces a dict of partial fields that include the following keys:</p> <ol> <li><code>justice_id</code>: int</li> <li><code>raw_ponente</code>: str</li> <li><code>per_curiam</code>: bool</li> </ol>"},{"location":"#corpus_judge.justice_select.CandidateJustice.rows","title":"<code>rows: list[dict]</code>  <code>property</code>","text":"<p>When selecting a ponente or voting members, create a candidate list of justices based on the <code>valid_date</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import yaml\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from sqlpyd import Connection\n&gt;&gt;&gt; p = Path(__file__).parent / \"sc.yaml\"\n&gt;&gt;&gt; c = Connection(DatabasePath=\"test.db\")\n&gt;&gt;&gt; c.path_to_db.unlink(missing_ok=True) # tear down\n&gt;&gt;&gt; tbl = c.create_table(Justice)\n&gt;&gt;&gt; res = c.add_records(Justice, yaml.safe_load(p.read_bytes()))\n&gt;&gt;&gt; search = CandidateJustice(db=c.db, date_str='Dec. 1, 1995')\n&gt;&gt;&gt; print(search.rows) # since start date is greater than target date, record is included\n[{'id': 137, 'surname': 'panganiban', 'alias': None, 'start_term': '1995-10-05', 'inactive_date': '2006-12-06', 'chief_date': '2005-12-20'}, {'id': 136, 'surname': 'hermosisima', 'alias': 'hermosisima jr.', 'start_term': '1995-01-10', 'inactive_date': '1997-10-18', 'chief_date': None}, {'id': 135, 'surname': 'francisco', 'alias': None, 'start_term': '1995-01-05', 'inactive_date': '1998-02-13', 'chief_date': None}, {'id': 134, 'surname': 'mendoza', 'alias': None, 'start_term': '1994-06-07', 'inactive_date': '2003-04-05', 'chief_date': None}, {'id': 133, 'surname': 'kapunan', 'alias': None, 'start_term': '1994-01-05', 'inactive_date': '2002-08-12', 'chief_date': None}, {'id': 132, 'surname': 'vitug', 'alias': None, 'start_term': '1993-06-28', 'inactive_date': '2004-07-15', 'chief_date': None}, {'id': 131, 'surname': 'puno', 'alias': None, 'start_term': '1993-06-28', 'inactive_date': '2010-05-17', 'chief_date': '2007-12-08'}, {'id': 128, 'surname': 'melo', 'alias': None, 'start_term': '1992-08-10', 'inactive_date': '2002-05-30', 'chief_date': None}, {'id': 127, 'surname': 'bellosillo', 'alias': None, 'start_term': '1992-03-03', 'inactive_date': '2003-11-13', 'chief_date': None}, {'id': 125, 'surname': 'romero', 'alias': None, 'start_term': '1991-10-21', 'inactive_date': '1999-08-01', 'chief_date': None}, {'id': 124, 'surname': 'davide', 'alias': 'davide jr.', 'start_term': '1991-01-24', 'inactive_date': '2005-12-20', 'chief_date': '1998-11-30'}, {'id': 123, 'surname': 'regalado', 'alias': None, 'start_term': '1988-07-29', 'inactive_date': '1998-10-13', 'chief_date': None}, {'id': 116, 'surname': 'padilla', 'alias': None, 'start_term': '1987-01-12', 'inactive_date': '1997-08-22', 'chief_date': None}, {'id': 115, 'surname': 'feliciano', 'alias': None, 'start_term': '1986-08-08', 'inactive_date': '1995-12-13', 'chief_date': None}, {'id': 112, 'surname': 'narvasa', 'alias': None, 'start_term': '1986-04-10', 'inactive_date': '1998-11-30', 'chief_date': '1991-12-08'}]\n&gt;&gt;&gt; c.path_to_db.unlink() # tear down\n</code></pre> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: Filtered list of justices</p>"},{"location":"#view-chief-justice-dates","title":"View chief justice dates","text":"SQL<pre><code>WITH end_chief_date(d) AS (\n-- For each chief justice, get a second date: the date that the next chief justice is appointed; Can get this by getting the first chief date greater than the present chief date and using an ascending order. */\nSELECT\nDATE(\ntbl2.chief_date,\n'-1 day'\n)\nFROM\n{{ justice_table }}\ntbl2\nWHERE\ntbl2.chief_date IS NOT NULL\nAND tbl2.chief_date &gt; tbl1.chief_date\nORDER BY\ntbl2.chief_date ASC\nLIMIT\n1\n), time_as_chief(period) AS (\n-- Difference between the two chief dates: that will be the time served as chief in years format */\nSELECT\n(\nSELECT\nDATE(d)\nFROM\nend_chief_date\n) - DATE(\ntbl1.chief_date\n)\n)\nSELECT\ntbl1.id,\ntbl1.last_name,\ntbl1.chief_date,\n(\nSELECT\nd\nFROM\nend_chief_date\n) max_end_chief_date,\nMIN(\ntbl1.inactive_date,\n(\nSELECT\nd\nFROM\nend_chief_date\n)\n) actual_inactive_as_chief,\n(\nSELECT\nperiod\nFROM\ntime_as_chief\n) years_as_chief\nFROM\n{{ justice_table }}\ntbl1\nWHERE\ntbl1.chief_date IS NOT NULL\nORDER BY\ntbl1.chief_date DESC\n</code></pre> Python<pre><code>[\n{\n'id': 178,\n'last_name': 'Gesmundo',\n'chief_date': '2021-04-05',\n'max_end_chief_date': None,\n'actual_inactive_as_chief': None,\n'years_as_chief': None\n},\n{\n'id': 162,\n'last_name': 'Peralta',\n'chief_date': '2019-10-23',\n'max_end_chief_date': '2021-04-04',\n'actual_inactive_as_chief': '2021-03-27',\n'years_as_chief': 2\n},\n{\n'id': 163,\n'last_name': 'Bersamin',\n'chief_date': '2018-11-26',\n'max_end_chief_date': '2019-10-22',\n'actual_inactive_as_chief': '2019-10-18',\n'years_as_chief': 1\n},\n{\n'id': 160,\n'last_name': 'Leonardo-De Castro',\n'chief_date': '2018-08-28',\n'max_end_chief_date': '2018-11-25',\n'actual_inactive_as_chief': '2018-10-08',\n'years_as_chief': 0\n}...\n]\n</code></pre>"}]}